{"version":3,"sources":["../../src/extend-theme.ts"],"names":["extendTheme","overrides","customizer","source","override","key","object","Object","prototype","hasOwnProperty","call","sourceValue","overrideValue","undefined","defaultTheme"],"mappings":";;;;;AAAA;;AACA;;;;AAwBA;AACA;AACA;AACA;AACO,SAASA,WAAT,CAA8CC,SAA9C,EAA4D;AACjE,WAASC,UAAT,CACEC,MADF,EAEEC,QAFF,EAGEC,GAHF,EAIEC,MAJF,EAKE;AACA,QACE,uBAAWH,MAAX,KACAI,MAAM,CAACC,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCJ,MAArC,EAA6CD,GAA7C,CAFF,EAGE;AACA,aAAO,YAAwB;AAC7B,YAAMM,WAAW,GAAGR,MAAM,MAAN,mBAApB;AAEA,YAAMS,aAAa,GAAG,uBAAWR,QAAX,IAClBA,QAAQ,MAAR,mBADkB,GAElBA,QAFJ;AAIA,eAAO,sBAAU,EAAV,EAAcO,WAAd,EAA2BC,aAA3B,EAA0CV,UAA1C,CAAP;AACD,OARD;AASD,KAdD,CAgBA;;;AACA,WAAOW,SAAP;AACD;;AAED,SAAO,sBAAU,EAAV,EAAcC,iBAAd,EAA4Bb,SAA5B,EAAuCC,UAAvC,CAAP;AACD","sourcesContent":["import defaultTheme, { Theme } from \"@chakra-ui/theme\"\nimport { isFunction, mergeWith } from \"@chakra-ui/utils\"\nimport { ColorHues } from \"@chakra-ui/theme/dist/types/foundations/colors\"\n\ntype ThemeExtensionTypeHints = {\n  colors: Record<string, Partial<ColorHues> | string> // typehints for color definitions\n}\n\n/**\n * Represents a loose but specific type for the theme override.\n * It provides autocomplete hints for extending the theme, but leaves room\n * for adding properties.\n */\ntype DeepThemeExtension<ThemeObject, TypeHints> = {\n  [Key in keyof ThemeObject]?:\n    | Omit<DeepThemeExtension<ThemeObject[Key], TypeHints>, keyof TypeHints> // recursive type clone\n    | (ThemeObject[Key] extends (...args: any[]) => any\n        ? Partial<ReturnType<ThemeObject[Key]>>\n        : Partial<ThemeObject[Key]>) // allow function or object\n} &\n  Partial<TypeHints> &\n  Record<string, any> // escape hatch\n\nexport type ThemeOverride = DeepThemeExtension<Theme, ThemeExtensionTypeHints>\n\n/**\n * Function to override or customize the Chakra UI theme conveniently\n * @param overrides - Your custom theme object overrides\n */\nexport function extendTheme<T extends ThemeOverride>(overrides: T) {\n  function customizer(\n    source: unknown,\n    override: unknown,\n    key: string,\n    object: any,\n  ) {\n    if (\n      isFunction(source) &&\n      Object.prototype.hasOwnProperty.call(object, key)\n    ) {\n      return (...args: unknown[]) => {\n        const sourceValue = source(...args)\n\n        const overrideValue = isFunction(override)\n          ? override(...args)\n          : override\n\n        return mergeWith({}, sourceValue, overrideValue, customizer)\n      }\n    }\n\n    // fallback to default behaviour\n    return undefined\n  }\n\n  return mergeWith({}, defaultTheme, overrides, customizer)\n}\n"],"file":"extend-theme.js"}